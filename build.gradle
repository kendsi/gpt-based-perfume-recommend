plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.acscent'
version = '2.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(22)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation("org.springframework.boot:spring-boot-starter-log4j2")
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	implementation 'mysql:mysql-connector-java:8.0.33'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def generated = file("${buildDir}/generated/sources/annotationProcessor/java/main")

sourceSets {
    main {
        java {
            srcDirs += generated
        }
    }
}

clean {
	delete file(generated)
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaExec) {
    jvmArgs '-Dfile.encoding=UTF-8'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters"
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
    doFirst {
        generated.mkdirs()
    }
    options.compilerArgs += [
        "-Aquerydsl.generated=" + generated
    ]
}